{"version":3,"sources":["utils/http.js","components/main-pages/home-comps/LoginSignup.js","utils/breakpoints.js","utils/If.js","utils/avatars.js","components/main-pages/PageHome.js","js/ws.js","components/main-pages/dashboard-comps/home/ChatroomsHome.js","utils/getDate&Time.js","components/main-pages/dashboard-comps/home/Chat.js","components/main-pages/dashboard-comps/home/CreateChatroom.js","components/main-pages/dashboard-comps/home/Col3.js","components/main-pages/dashboard-comps/settings/ChatroomsSettings.js","components/main-pages/dashboard-comps/settings/UserSettings.js","components/main-pages/dashboard-comps/Nav.js","components/main-pages/dashboard-comps/UserAvatar.js","components/main-pages/dashboard-comps/SearchChatrooms.js","components/main-pages/dashboard-comps/PageSettings.js","components/main-pages/PageDashboard.js","components/Test.js","App.js","reportWebVitals.js","index.js"],"names":["api_address","get","endpoint","signal","a","fetch","method","headers","authorization","localStorage","getItem","then","res","json","post","data","console","log","body","JSON","stringify","LoginSignup","loginSignup","setLoginSignup","usernameInput","passwordInput","theme","avatar","setResponseMessage","history","useHistory","loginSingupTexts","submitFetch","btnState","endPoint","payload","name","password","avatarChange","themeChange","response","success","setItem","push","message","className","type","onClick","breakpoints","If","condition","children","StyledDiv","styled","props","img","PageHome","avatars","useState","window","innerWidth","W","setW","setAvatar","avatarSwitch","setAvatarSwitch","setTheme","setUsernameInput","setPasswordInput","responseMessage","useEffect","changeW","addEventListener","removeEventListener","Container","Row","Col","lg","span","order","md","xs","htmlFor","id","placeholder","onChange","e","target","value","hidden","defaultValue","map","StyledSection","ChatroomsHome","user","userChatrooms","joinableChatrooms","searchChatrooms","setActiveChatroom","searchJoinableChatroomsCheckbox","setCreateChatroom","fetchLastMsg","setFetchLastMsg","Messages","setmessages","ws","room","includes","joinable","Chatroom","lastMessage","setLastMessage","lastMessageSender","setLastMessageSender","setLoading","fetchLastMessage","messages","at","sender","lastMessageSenderFetch","fetchStarmarkChatroom","_id","fetchJoinChatroom","send","abortController","AbortController","abort","admins","xmlns","width","height","viewBox","starmarked","classList","toggle","d","LastMsg","text","time","getDateAndTime","date","Date","toLocaleDateString","split","year","day","month","timeSplitted","toLocaleTimeString","Chat","activeChatroom","Message","setmessage","inputMessage","setInputMessage","roomMembers","setRoomMembers","setNotRoomMembers","setRoomAdmins","msgAva","setMsgAva","fetchMsgs","fetchAllUsers","activeRoom","filter","u","members","sort","b","fetchMessages","filterMsgsAva","msgs","arr2","i","length","onmessage","theMessage","parse","chatroom","document","querySelector","scrollTop","scrollHeight","readyState","m","me","CreateChatroom","createChatroom","newRoomName","setNewRoomName","newRoomTheme","setNewRoomTheme","newRoomMembers","setNewRoomMembers","addableUsers","setAddableUsers","searchUsersInput","setSearchUsersInput","fetchCreateChatroom","prev","Col3","fetchChatrooms","setMessage","setMessages","ChatroomsSettings","setFetchAgain","fetchAgain","setUser","loading","setUserChatrooms","roomName","setRoomName","roomAdmins","roomTheme","setRoomTheme","notRoomMembers","fetchUser","userID","chat","chatA","chatB","fetchUpdateChatroom","roomId","newRoomAdmins","forEach","fetchDeleteChatroom","detail","fetchLeaveChatroom","some","newArr","newArr2","undefined","add","UserSettings","setName","newPassword","setNewPassword","currentPassword","setCurrentPassword","fetchUpdateUser","Nav","setDashboardNavState","dashboardNavState","transform","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","removeItem","x2","UserAvatar","SearchChatrooms","page","setCheckbox","setSearchChatrooms","onInput","checked","PageSettings","PageDashboard","setSearchJoinableChatroomsCheckbox","setWs","WebSocket","onopen","onclose","close","checkbox","Test","allChatrooms","setAllChatrooms","setJoinableChatrooms","requireLogin","to","from","next","meta","auth","redirect","Loading","NotFound","App","guards","error","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d015e6d4.chunk.js","sourcesContent":["// export const api_address = \"http://localhost:5002\";\r\n// export const client_address = \"http://localhost:3000\";\r\nexport const api_address = \"https://chatwskul.herokuapp.com\";\r\nexport const client_address = \"https://chatwskul.herokuapp.com\";\r\n// export const api_address = \"192.168.222.178:5002\";\r\n// export const client_address = \"192.168.222.178:3000\";\r\n\r\nexport const get = async (endpoint, signal) => {\r\n  return await fetch(api_address + endpoint, {\r\n    method: \"GET\",\r\n    signal: signal,\r\n    headers: {\r\n      authorization: localStorage.getItem(\"token\") || \"\",\r\n    },\r\n  }).then((res) => res.json());\r\n};\r\n\r\nexport const post = async (endpoint, data) => {\r\n  console.log(data);\r\n  return await fetch(api_address + endpoint, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      authorization: localStorage.getItem(\"token\") || \"\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  }).then((res) => res.json());\r\n};\r\n","import { post } from \"../../../utils/http\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useState } from \"react\";\r\n\r\nexport const LoginSignup = ({\r\n  loginSignup,\r\n  setLoginSignup,\r\n  usernameInput,\r\n  passwordInput,\r\n  theme,\r\n  avatar,\r\n  setResponseMessage,\r\n}) => {\r\n  const history = useHistory();\r\n\r\n  let loginSingupTexts =\r\n    loginSignup === \"login\"\r\n      ? [\"Log in\", \"Dont have account? \", \"Sign up\"]\r\n      : [\"Sign up\", \"By singing up you agree osvosv \", \"terms and conditions\"];\r\n\r\n  const signupOrTermsCond = () => {\r\n    loginSignup === \"login\"\r\n      ? setLoginSignup(\"signup\")\r\n      : console.log(\"terms and condition page\");\r\n  };\r\n\r\n  const submitFetch = async (btnState) => {\r\n    let endPoint = \"/user-login\";\r\n\r\n    if (btnState !== \"login\") {\r\n      endPoint = \"/create-user\";\r\n    }\r\n\r\n    let payload = {\r\n      name: usernameInput,\r\n      password: passwordInput,\r\n      avatar: avatar[0],\r\n      avatarChange: avatar[1],\r\n      theme: theme[0],\r\n      themeChange: theme[1],\r\n    };\r\n\r\n    const response = await post(endPoint, payload);\r\n\r\n    if (response.success) {\r\n      localStorage.setItem(\"token\", response.data);\r\n      return history.push(\"/dashboard\");\r\n    } else {\r\n      setResponseMessage(response.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"flex center login-con-logsign-con\">\r\n      <button\r\n        type=\"button\"\r\n        className=\"center login-btn\"\r\n        onClick={() => submitFetch(loginSignup)}\r\n      >\r\n        {loginSingupTexts[0]}\r\n      </button>\r\n      <p className=\"center login-con-noaccount\">\r\n        {loginSingupTexts[1]}\r\n        <span onClick={() => signupOrTermsCond()}>{loginSingupTexts[2]}</span>\r\n      </p>\r\n    </section>\r\n  );\r\n};\r\n","export const breakpoints = {\r\n  large: 992,\r\n  // BS lg = >= 992\r\n  medium: 768,\r\n  // BS md = >= 768\r\n  small: 576,\r\n  // BS xs = < 576\r\n\r\n  // mobile = xs\r\n  // web = sm\r\n};\r\n","export const If = ({ condition, children }) => {\r\n  return <>{condition && children}</>;\r\n};\r\n","export default [\r\n  \"Asset-25.png\",\r\n  \"avatar-prel.png\",\r\n  \"Asset-5.png\",\r\n  \"Asset-9.png\",\r\n  \"Asset-10.png\",\r\n  \"Asset-11.png\",\r\n  \"Asset-12.png\",\r\n  \"Asset-13.png\",\r\n  \"Asset-14.png\",\r\n  \"Asset-15.png\",\r\n  \"Asset-16.png\",\r\n  \"Asset-17.png\",\r\n  \"Asset-18.png\",\r\n  \"Asset-19.png\",\r\n  \"Asset-20.png\",\r\n  \"Asset-21.png\",\r\n  \"Asset-23.png\",\r\n  \"Asset-24.png\",\r\n];\r\n","import { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport { LoginSignup } from \"./home-comps/LoginSignup\";\r\n\r\nimport { breakpoints } from \"../../utils/breakpoints\";\r\nimport { api_address, post } from \"../../utils/http\";\r\nimport { If } from \"../../utils/If\";\r\n\r\nimport avatars from \"../../utils/avatars\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledDiv = styled(\"div\")`\r\n  background-image: url(../avatars/${(props) => props.img});\r\n`;\r\nexport const PageHome = () => {\r\n  console.log(avatars);\r\n  const [W, setW] = useState(window.innerWidth);\r\n  const [loginSignup, setLoginSignup] = useState(\"login\");\r\n  const [avatar, setAvatar] = useState([avatars[0], 0]);\r\n  const [avatarSwitch, setAvatarSwitch] = useState(false);\r\n  const [theme, setTheme] = useState([0, 0]);\r\n\r\n  const [usernameInput, setUsernameInput] = useState(\"\");\r\n  const [passwordInput, setPasswordInput] = useState(\"\");\r\n\r\n  const [responseMessage, setResponseMessage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let changeW = window.addEventListener(\"resize\", () =>\r\n      setW(window.innerWidth)\r\n    );\r\n    return window.removeEventListener(\"resize\", changeW);\r\n  }, [W]);\r\n\r\n  return (\r\n    <Container\r\n      className={`page page-home ${\r\n        W < breakpoints.medium ? \"page-home-mobile\" : \"page-home-desktop\"\r\n      }`}\r\n    >\r\n      <Container className=\"flex login-con\">\r\n        <h3>{loginSignup === \"login\" ? \"Welcome\" : \"Create account\"}</h3>\r\n\r\n        <Container className=\"height100\">\r\n          <Row className=\"height100\">\r\n            <Col\r\n              lg={{ span: avatarSwitch ? 5 : 8, order: 1 }}\r\n              md={{ span: avatarSwitch ? 5 : 8, order: 1 }}\r\n              xs={{ span: 12, order: 1 }}\r\n              className=\"col-nopad home-con-col1\"\r\n            >\r\n              <section className=\"flex height100 login-con-form-btn\">\r\n                <div className=\"flex login-con-form-userpass\">\r\n                  <label htmlFor=\"name\">username:</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id=\"name\"\r\n                    placeholder=\"haakon1337\"\r\n                    onChange={(e) => setUsernameInput(e.target.value)}\r\n                  />\r\n                  <label htmlFor=\"password\">password:</label>\r\n                  <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    id=\"password\"\r\n                    placeholder=\"pAssword123!\"\r\n                    onChange={(e) => setPasswordInput(e.target.value)}\r\n                  />\r\n                  <input type=\"number\" name=\"theme\" value={theme[0]} hidden />\r\n                  <input type=\"number\" name=\"avatar\" value={avatar[0]} hidden />\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"avatarChange\"\r\n                    defaultValue={avatar[1]}\r\n                    hidden\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"themeChange\"\r\n                    defaultValue={theme[1]}\r\n                    hidden\r\n                  />\r\n                </div>\r\n\r\n                <If condition={responseMessage !== null}>\r\n                  <div>{responseMessage}</div>\r\n                </If>\r\n\r\n                <If condition={W > breakpoints.medium}>\r\n                  <LoginSignup\r\n                    loginSignup={loginSignup}\r\n                    setLoginSignup={setLoginSignup}\r\n                    usernameInput={usernameInput}\r\n                    passwordInput={passwordInput}\r\n                    theme={theme}\r\n                    avatar={avatar}\r\n                    setResponseMessage={setResponseMessage}\r\n                  />\r\n                </If>\r\n              </section>\r\n            </Col>\r\n            <Col\r\n              lg={{ span: avatarSwitch ? 3 : 4, order: 2 }}\r\n              md={{ span: avatarSwitch ? 3 : 4, order: 2 }}\r\n              xs={{ span: 12, order: 2 }}\r\n              className={`home-con-col2 ${\r\n                W < breakpoints.medium ? \"flex\" : \"\"\r\n              } col-nopad`}\r\n            >\r\n              <Col\r\n                lg={{ span: 12, order: 1 }}\r\n                md={{ span: 12, order: 1 }}\r\n                xs={{ span: 6, order: 1 }}\r\n                className=\"login-con-avatar-con col-nopad\"\r\n              >\r\n                <StyledDiv\r\n                  img={avatar[0]}\r\n                  className=\"chosen-avatar\"\r\n                ></StyledDiv>\r\n                <button onClick={() => setAvatarSwitch(!avatarSwitch)}>\r\n                  byt\r\n                </button>\r\n              </Col>\r\n              <Col\r\n                lg={{ span: 12, order: 2 }}\r\n                md={{ span: 12, order: 2 }}\r\n                xs={{ span: 6, order: 2 }}\r\n                className=\"login-con-theme-con col-nopad\"\r\n              >\r\n                <button onClick={() => setTheme([0, 1])}>olf theme</button>\r\n                <button onClick={() => setTheme([1, 1])}>poke theme</button>\r\n              </Col>\r\n            </Col>\r\n            <If condition={avatarSwitch}>\r\n              <Col\r\n                lg={{ span: 4, order: 3 }}\r\n                md={{ span: 4, order: 3 }}\r\n                xs={{ span: 12, order: 3 }}\r\n                className=\"flex col-nopad home-con-col3\"\r\n              >\r\n                {avatars.map((a) => {\r\n                  return (\r\n                    <StyledDiv\r\n                      img={a}\r\n                      className=\"avatars\"\r\n                      onClick={() => setAvatar([a, 1])}\r\n                    ></StyledDiv>\r\n                  );\r\n                })}\r\n              </Col>\r\n            </If>\r\n          </Row>\r\n        </Container>\r\n      </Container>\r\n\r\n      <If condition={W < breakpoints.medium}>\r\n        <LoginSignup\r\n          loginSignup={loginSignup}\r\n          setLoginSignup={setLoginSignup}\r\n          usernameInput={usernameInput}\r\n          passwordInput={passwordInput}\r\n          theme={theme}\r\n          avatar={avatar}\r\n          setResponseMessage={setResponseMessage}\r\n        />\r\n      </If>\r\n    </Container>\r\n  );\r\n};\r\n","// import functions\r\nimport { parse } from \"../utils/parse\";\r\nimport { addMessage } from \"../utils/addMessage\";\r\nimport { api_address } from \"../utils/http\";\r\n\r\nexport const WS = () => {\r\n  // use WebSocket\r\n  const websocket = new WebSocket(\"ws://localhost:5002\");\r\n\r\n  console.log(\"ws\");\r\n\r\n  // listen on close event\r\n  websocket.addEventListener(\"close\", (event) => {\r\n    console.log(\"Server down...\", event);\r\n  });\r\n\r\n  // listen to message event\r\n  websocket.addEventListener(\"message\", ({ data }) => {\r\n    console.log(\"Message from server: \", data);\r\n\r\n    let obj = parse(data);\r\n\r\n    console.log(obj);\r\n\r\n    // use property 'type' to handle message event\r\n    //   switch (obj.type) {\r\n    //     case \"chat\":\r\n    //       // display message to client(s)\r\n    //       addMessage(obj.data.nickname, obj.data.text, new Date(obj.data.date));\r\n    //       break;\r\n\r\n    //     default:\r\n    //       break;\r\n    //   }\r\n  });\r\n\r\n  // variables and event listeners\r\n  // let nickname;\r\n\r\n  // const inputNickname = document.getElementById(\"inputNickname\");\r\n  // const buttonNickname = document.getElementById(\"buttonNickname\");\r\n  // const inputText = document.getElementById(\"inputText\");\r\n\r\n  // inputNickname.focus();\r\n\r\n  // buttonNickname.addEventListener(\"click\", () => {\r\n  //   nickname = inputNickname.value;\r\n  //   if (nickname.length > 2) {\r\n  //     // disable element\r\n  //     inputNickname.setAttribute(\"disabled\", \"disabled\");\r\n\r\n  //     // hide button\r\n  //     buttonNickname.classList.toggle(\"hidden\");\r\n\r\n  //     // display field for new text messages - focus element to set a cursor\r\n  //     inputText.classList.toggle(\"hidden\");\r\n  //     inputText.focus();\r\n  //   }\r\n  // });\r\n\r\n  // inputText.addEventListener(\"keydown\", (event) => {\r\n  //   // add message when Enter key is pressed\r\n  //   if (event.code === \"Enter\" && inputText.value.length > 0) {\r\n  //     let date = new Date();\r\n\r\n  //     // add message to DOM\r\n  //     addMessage(nickname, inputText.value, date);\r\n\r\n  //     // send to websocket server\r\n  //     let obj = {\r\n  //       type: \"chat\",\r\n  //       data: { nickname: nickname, text: inputText.value, date: date },\r\n  //     };\r\n  //     websocket.send(JSON.stringify(obj));\r\n\r\n  //     // clear\r\n  //     inputText.value = \"\";\r\n  //   }\r\n  // });\r\n};\r\n\r\n// // use WebSocket\r\n//   const websocket = new WebSocket(\"ws://localhost:5002\");\r\n//   console.log(\"ws\");\r\n\r\n//   websocket.addEventListener(\"close\", (event) => {\r\n//     console.log(\"Server down...\", event);\r\n//   });\r\n//   websocket.addEventListener(\"message\", ({ data }) => {\r\n//     console.log(\"Message from server: \", data);\r\n\r\n//     let obj = parse(data);\r\n\r\n//     console.log(obj);\r\n//   });\r\n// };\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { post, get } from \"../../../../utils/http\";\r\nimport { If } from \"../../../../utils/If\";\r\n\r\nimport styled from \"styled-components\";\r\nconst StyledSection = styled(\"section\")`\r\n  background: linear-gradient(\r\n    235deg,\r\n    ${(props) => props.theme} 25%,\r\n    rgba(255, 255, 255, 1) 25%\r\n  );\r\n`;\r\nconst StyledDiv = styled(\"div\")`\r\n  background-image: url(../avatars/${(props) => props.img});\r\n`;\r\n\r\nconst LastMsgContext = React.createContext(\"\");\r\n\r\nexport const ChatroomsHome = ({\r\n  user,\r\n  userChatrooms,\r\n  joinableChatrooms,\r\n  searchChatrooms,\r\n  setActiveChatroom,\r\n  searchJoinableChatroomsCheckbox,\r\n  setCreateChatroom,\r\n  fetchLastMsg,\r\n  setFetchLastMsg,\r\n  Messages,\r\n  setmessages,\r\n  ws,\r\n}) => {\r\n  return (\r\n    <section className=\"flex dash-home-chatrooms\">\r\n      <div className=\"flex home-chatrooms-con\">\r\n        {searchJoinableChatroomsCheckbox === false\r\n          ? userChatrooms.map((room) => {\r\n              return (\r\n                <If condition={room.name.includes(searchChatrooms)}>\r\n                  <Chatroom\r\n                    joinable={\"notJoinable\"}\r\n                    setActiveChatroom={setActiveChatroom}\r\n                    room={room}\r\n                    user={user}\r\n                    setCreateChatroom={setCreateChatroom}\r\n                    fetchLastMsg={fetchLastMsg}\r\n                    setFetchLastMsg={setFetchLastMsg}\r\n                    Messages={Messages}\r\n                    setmessages={setmessages}\r\n                    ws={ws}\r\n                  />\r\n                </If>\r\n              );\r\n            })\r\n          : joinableChatrooms.map((room) => {\r\n              return (\r\n                <If condition={room.name.includes(searchChatrooms)}>\r\n                  <Chatroom\r\n                    joinable={\"joinable\"}\r\n                    setActiveChatroom={setActiveChatroom}\r\n                    room={room}\r\n                    user={user}\r\n                    ws={ws}\r\n                  />\r\n                </If>\r\n              );\r\n            })}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst Chatroom = ({\r\n  joinable,\r\n  room,\r\n  setActiveChatroom,\r\n  user,\r\n  setCreateChatroom,\r\n  fetchLastMsg,\r\n  ws,\r\n}) => {\r\n  const [lastMessage, setLastMessage] = useState({});\r\n  const [lastMessageSender, setLastMessageSender] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchLastMessage = async (signal) => {\r\n    console.log(\"fetch last\");\r\n    let lastMessage = await get(\r\n      `/protected/get-message/${room.messages.at(-1)}`,\r\n      signal\r\n    );\r\n    setLastMessage(lastMessage.data);\r\n\r\n    if (lastMessage.data !== null) {\r\n      let lastMessageSenderFetch = await get(\r\n        `/protected/get-user/${lastMessage.data.sender}`,\r\n        signal\r\n      );\r\n      setLastMessageSender(lastMessageSenderFetch.data);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const fetchStarmarkChatroom = async () => {\r\n    console.log(\"fetch starmark\");\r\n\r\n    await post(`/protected/starmark-chatroom/${room._id}/${user._id}`);\r\n  };\r\n\r\n  const fetchJoinChatroom = async () => {\r\n    let res = await post(`/protected/join-chatroom/${room._id}/${user._id}`);\r\n    ws.send(\r\n      JSON.stringify({\r\n        type: \"roomsUpdate\",\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(async () => {\r\n    if (joinable === \"notJoinable\") {\r\n      const abortController = new AbortController();\r\n      await fetchLastMessage(abortController.signal);\r\n      return () => abortController.abort();\r\n    }\r\n  }, [fetchLastMsg]);\r\n\r\n  if (loading) {\r\n    <h4>loading ...</h4>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {joinable === \"notJoinable\" ? (\r\n        <StyledSection\r\n          theme={room.theme}\r\n          className=\"col2-chatroom-con\"\r\n          onClick={() => {\r\n            setActiveChatroom(room);\r\n            setCreateChatroom(false);\r\n          }}\r\n        >\r\n          <div className=\"flex chatroom-con-title-fav-con\">\r\n            <div className=\"flex fav-con-name-admin\">\r\n              <div className=\"flex\">\r\n                <h5>{room.name}</h5>\r\n                <If condition={room.admins.includes(user._id)}>\r\n                  <div className=\"fav-con-admin-icon\">A</div>\r\n                </If>\r\n              </div>\r\n            </div>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"24\"\r\n              height=\"24\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path\r\n                className={`${\r\n                  room.starmarked.includes(user._id) ? \"starmarked\" : \"\"\r\n                } title-fav-con-fav`}\r\n                onClick={(e) => {\r\n                  e.target.classList.toggle(\"starmarked\");\r\n                  fetchStarmarkChatroom();\r\n                }}\r\n                d=\"M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.279-7.416-3.967-7.417 3.967 1.481-8.279-6.064-5.828 8.332-1.151z\"\r\n              />\r\n            </svg>\r\n          </div>\r\n          {lastMessage !== null ? (\r\n            <div className=\"flex chatroom-con-mes\">\r\n              <StyledDiv\r\n                img={lastMessageSender.avatar}\r\n                className=\"con-mes-avatar\"\r\n              ></StyledDiv>\r\n              <LastMsg value={lastMessage} />\r\n            </div>\r\n          ) : (\r\n            <div className=\"con-mes-no-message\">no messages</div>\r\n          )}\r\n        </StyledSection>\r\n      ) : (\r\n        <StyledSection className=\"col2-chatroom-con\" theme={room.theme}>\r\n          <div className=\"flex chatroom-con-title-fav-con\">\r\n            <h5>{room.name}</h5>\r\n          </div>\r\n          <button onClick={() => fetchJoinChatroom()}>JOIN</button>\r\n        </StyledSection>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const LastMsg = ({ value }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"con-mes-message\">{value.text}</div>\r\n      <div className=\"con-mes-message-time\">{value.time}</div>\r\n    </div>\r\n  );\r\n};\r\n","export const getDateAndTime = () => {\r\n  let date = new Date().toLocaleDateString().split(\"-\");\r\n  let year = date[0].at(-2) + date[0].at(-1);\r\n  if (date[1].at(0) === 0 && date[2].at(0) === 0) {\r\n    let day = date[2];\r\n    let month = date[1];\r\n    date = `${day[1]}/${month[1]}`;\r\n  } else if (date[1].at(0) === 0) {\r\n    let month = date[1];\r\n    date = `${date[2]}/${month[1]}`;\r\n  } else if (date[2].at(0) === 0) {\r\n    let day = date[2];\r\n    date = `${day[1]}/${date[1]}`;\r\n  } else {\r\n    date = `${date[2]}/${date[1]}`;\r\n  }\r\n  let timeSplitted = new Date().toLocaleTimeString().split(\":\");\r\n  let time = timeSplitted[0] + \":\" + timeSplitted[1];\r\n  return date + \"-\" + year + \" \" + time;\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { If } from \"../../../../utils/If\";\r\nimport { post, get } from \"../../../../utils/http\";\r\nimport { getDateAndTime } from \"../../../../utils/getDate&Time\";\r\n\r\nimport styled from \"styled-components\";\r\nconst StyledDiv = styled(\"div\")`\r\n  background-image: url(../avatars/${(props) => props.img});\r\n`;\r\n\r\nexport const Chat = ({\r\n  activeChatroom,\r\n  user,\r\n  fetchLastMsg,\r\n  setFetchLastMsg,\r\n  ws,\r\n}) => {\r\n  const [Message, setmessage] = useState(null);\r\n  const [Messages, setmessages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [roomMembers, setRoomMembers] = useState([]);\r\n  const [notRoomMembers, setNotRoomMembers] = useState([]);\r\n  const [roomAdmins, setRoomAdmins] = useState([]);\r\n  const [msgAva, setMsgAva] = useState([]);\r\n  const [fetchMsgs, setFetchMsgs] = useState(false);\r\n\r\n  const fetchAllUsers = async (signal, activeRoom) => {\r\n    let res = await get(`/protected/get-all-users`, signal);\r\n    setRoomMembers(\r\n      res.data\r\n        .filter((u) => activeRoom.members.includes(u._id))\r\n        .sort((a, b) => {\r\n          return (\r\n            activeRoom.admins.includes(b._id) -\r\n            activeRoom.admins.includes(a._id)\r\n          );\r\n        })\r\n    );\r\n    setNotRoomMembers(\r\n      res.data.filter((u) => !activeRoom.members.includes(u._id))\r\n    );\r\n    setRoomAdmins(res.data.filter((u) => activeRoom.admins.includes(u._id)));\r\n    setLoading(false);\r\n  };\r\n\r\n  const fetchMessages = async (signal) => {\r\n    let res = await get(\r\n      `/protected/get-chatroom-messages/` + activeChatroom._id,\r\n      signal\r\n    );\r\n    await fetchAllUsers(signal, activeChatroom);\r\n    filterMsgsAva(res.data);\r\n    setmessages(res.data);\r\n  };\r\n\r\n  const msg = () => {\r\n    setmessage({\r\n      type: \"message\",\r\n      sender: user._id,\r\n      chatroom: activeChatroom._id,\r\n      text: inputMessage,\r\n      time: getDateAndTime(),\r\n    });\r\n  };\r\n\r\n  const filterMsgsAva = (msgs) => {\r\n    let arr2 = [];\r\n    for (let i = 0; i < msgs.length; i++) {\r\n      if (msgs[i + 1]) {\r\n        if (msgs[i].sender !== msgs[i + 1].sender) {\r\n          arr2.push(msgs[i]);\r\n        }\r\n      } else {\r\n        arr2.push(msgs[i]);\r\n      }\r\n    }\r\n    setMsgAva(arr2);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (ws) {\r\n      ws.onmessage = async (e) => {\r\n        let theMessage = JSON.parse(e.data);\r\n        let resMessage;\r\n        if (theMessage.type === \"message\") {\r\n          if (user._id === theMessage.sender) {\r\n            resMessage = await post(`/protected/create-message`, theMessage);\r\n          }\r\n          if (theMessage.chatroom === activeChatroom._id) {\r\n            setmessages([...Messages, theMessage]);\r\n            let msgs = Messages;\r\n            msgs.push(theMessage);\r\n            filterMsgsAva(msgs);\r\n            setFetchLastMsg(!fetchLastMsg);\r\n            document.querySelector(`.chat-con-mid`).scrollTop =\r\n              document.querySelector(`.chat-con-mid`).scrollHeight;\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }, [ws.onmessage]);\r\n\r\n  useEffect(() => {\r\n    if (Message && ws && ws.readyState === 1) {\r\n      ws.send(JSON.stringify(Message));\r\n      ws.send(\r\n        JSON.stringify({\r\n          type: \"roomsUpdate\",\r\n        })\r\n      );\r\n    }\r\n  }, [Message]);\r\n\r\n  useEffect(async () => {\r\n    const abortController = new AbortController();\r\n    if (activeChatroom !== null) await fetchMessages(abortController.signal);\r\n    return () => abortController.abort();\r\n  }, [activeChatroom, fetchMsgs]);\r\n\r\n  if (loading) {\r\n    <h4>loading ...</h4>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <section className=\"flex chat-con-top\">\r\n        <div className=\"flex top-userinfo\">\r\n          <div className=\"userinfo-avatar\">ava</div>\r\n          <div className=\"top-userinfo-chatroom-name\">\r\n            {activeChatroom.name}\r\n          </div>\r\n        </div>\r\n        <div className=\"flex top-settings\">\r\n          <div className=\"userinfo-avatar\">...</div>\r\n        </div>\r\n      </section>\r\n\r\n      <div\r\n        onClick={() => {\r\n          document.querySelector(`.chat-con-mid`).scrollTop =\r\n            document.querySelector(`.chat-con-mid`).scrollHeight;\r\n        }}\r\n      >\r\n        go bot\r\n      </div>\r\n      <section className={`chat-con-mid`}>\r\n        <If condition={Messages && Messages.length !== 0}>\r\n          {Messages.map((m, i) => {\r\n            return (\r\n              <div\r\n                className={`${\r\n                  m.sender === user._id ? \"message-right\" : \"message-left\"\r\n                }`}\r\n              >\r\n                <div className=\"flex message-wrapper\">\r\n                  <If condition={m.sender !== user._id && msgAva.includes(m)}>\r\n                    <StyledDiv\r\n                      img={\r\n                        roomMembers.filter((me) => me._id === m.sender)[0]\r\n                          .avatar\r\n                      }\r\n                      className=\"message-avatar\"\r\n                    ></StyledDiv>\r\n                  </If>\r\n                  <div className=\"message-text\">{m.text}</div>\r\n                  <If condition={m.sender === user._id && msgAva.includes(m)}>\r\n                    <StyledDiv\r\n                      img={\r\n                        roomMembers.filter((me) => me._id === m.sender)[0]\r\n                          .avatar\r\n                      }\r\n                      className=\"message-avatar\"\r\n                    ></StyledDiv>\r\n                  </If>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </If>\r\n      </section>\r\n      <section className=\"flex chat-con-bot\">\r\n        <div className=\"con-bot-con-message\">\r\n          <input\r\n            placeholder=\"write message\"\r\n            value={inputMessage}\r\n            onChange={(e) => setInputMessage(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"button\" onClick={() => msg()}>\r\n          send\r\n        </button>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { post, get } from \"../../../../utils/http\";\r\nimport { If } from \"../../../../utils/If\";\r\n\r\nexport const CreateChatroom = ({\r\n  setCreateChatroom,\r\n  createChatroom,\r\n  user,\r\n  ws,\r\n}) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [newRoomName, setNewRoomName] = useState(\"\");\r\n  const [newRoomTheme, setNewRoomTheme] = useState(\"#FA0000\");\r\n  const [newRoomMembers, setNewRoomMembers] = useState([user._id]);\r\n  const [addableUsers, setAddableUsers] = useState([]);\r\n  const [searchUsersInput, setSearchUsersInput] = useState(\"\");\r\n\r\n  const fetchAllUsers = async (signal) => {\r\n    let res = await get(`/protected/get-all-users`, signal);\r\n    setAddableUsers(res.data);\r\n    setLoading(false);\r\n  };\r\n\r\n  const fetchCreateChatroom = async () => {\r\n    await post(`/protected/create-chatroom`, {\r\n      name: newRoomName,\r\n      admins: [user._id],\r\n      members: newRoomMembers,\r\n      theme: newRoomTheme,\r\n    });\r\n    setCreateChatroom(false);\r\n    ws.send(\r\n      JSON.stringify({\r\n        type: \"roomsUpdate\",\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(async () => {\r\n    const abortController = new AbortController();\r\n    if (createChatroom) await fetchAllUsers(abortController.signal);\r\n    return () => abortController.abort();\r\n  }, [createChatroom]);\r\n\r\n  if (loading) {\r\n    <h4>loading ...</h4>;\r\n  }\r\n\r\n  return (\r\n    <section className=\"dashboard-con-create-con\">\r\n      <div className=\"flex create-con-top\">\r\n        <h3>Create chatroom</h3>\r\n        <button\r\n          className=\"create-con-button-back\"\r\n          onClick={() => setCreateChatroom(false)}\r\n        >\r\n          BACK\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"create-con-name\">\r\n        <label htmlFor=\"\" className=\"create-con-text\">\r\n          Name:\r\n        </label>\r\n\r\n        <input\r\n          className=\"create-con-input-text\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          onChange={(e) => setNewRoomName(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"flex create-con-theme-color\">\r\n        <input type=\"text\" name=\"theme\" value={newRoomTheme} hidden />\r\n        <div className=\"create-con-text\">Color:</div>\r\n        <div className=\"flex create-con-default-colors\">\r\n          <div\r\n            className=\"create-con-green\"\r\n            onClick={() => setNewRoomTheme(\"#A2DC68\")}\r\n          ></div>\r\n          <div\r\n            className=\"create-con-blue\"\r\n            onClick={() => setNewRoomTheme(\"#68DCC4\")}\r\n          ></div>\r\n          <div\r\n            className=\"create-con-purple\"\r\n            onClick={() => setNewRoomTheme(\"#DC68D0\")}\r\n          ></div>\r\n          <div\r\n            className=\"create-con-yellow\"\r\n            onClick={() => setNewRoomTheme(\"#D8DC68\")}\r\n          ></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex create-con-pick-color\">\r\n        <div className=\"create-con-text\">Pick your own:</div>\r\n        <input\r\n          className=\"create-con-color-picker\"\r\n          type=\"color\"\r\n          onChange={(e) => setNewRoomTheme(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"create-con-add-user\">\r\n        <label className=\"create-con-text\" htmlFor=\"\">\r\n          Add ppl:\r\n        </label>\r\n        <input\r\n          className=\"create-con-input-text\"\r\n          type=\"text\"\r\n          placeholder=\"search user\"\r\n          onChange={(e) => setSearchUsersInput(e.target.value)}\r\n        />\r\n        <div className=\"flex add-user-user-container\">\r\n          <If condition={searchUsersInput !== \"\"}>\r\n            {addableUsers.map((m) => {\r\n              return (\r\n                <If condition={m.name.includes(searchUsersInput)}>\r\n                  <div\r\n                    className=\"flex\"\r\n                    onClick={() => {\r\n                      !newRoomMembers.includes(m._id)\r\n                        ? setNewRoomMembers((prev) => {\r\n                            return [...prev, m._id];\r\n                          })\r\n                        : setNewRoomMembers(\r\n                            newRoomMembers.filter((me) => me !== m._id)\r\n                          );\r\n                    }}\r\n                  >\r\n                    <div\r\n                      className={`user-add-name ${\r\n                        newRoomMembers.includes(m._id) ? \"added\" : \"\"\r\n                      }`}\r\n                    >\r\n                      {m.name}\r\n                    </div>\r\n                  </div>\r\n                </If>\r\n              );\r\n            })}\r\n          </If>\r\n        </div>\r\n      </div>\r\n      <button\r\n        className=\"create-con-button-create\"\r\n        onClick={() => fetchCreateChatroom()}\r\n      >\r\n        CREATE\r\n      </button>\r\n    </section>\r\n  );\r\n};\r\n","import { Chat } from \"./Chat\";\r\nimport { CreateChatroom } from \"./CreateChatroom\";\r\n\r\nexport const Col3 = ({\r\n  user,\r\n  activeChatroom,\r\n  setActiveChatroom,\r\n  ws,\r\n  createChatroom,\r\n  setCreateChatroom,\r\n  fetchChatrooms,\r\n  fetchLastMsg,\r\n  setFetchLastMsg,\r\n  send,\r\n  message,\r\n  messages,\r\n  setMessage,\r\n  setMessages,\r\n}) => {\r\n  return (\r\n    <section className=\"flex height100 col3-chat-con\">\r\n      {createChatroom ? (\r\n        <CreateChatroom\r\n          fetchChatrooms={fetchChatrooms}\r\n          setCreateChatroom={setCreateChatroom}\r\n          createChatroom={createChatroom}\r\n          user={user}\r\n          ws={ws}\r\n        />\r\n      ) : (\r\n        <>\r\n          {activeChatroom !== null ? (\r\n            <Chat\r\n              activeChatroom={activeChatroom}\r\n              setActiveChatroom={setActiveChatroom}\r\n              user={user}\r\n              fetchLastMsg={fetchLastMsg}\r\n              setFetchLastMsg={setFetchLastMsg}\r\n              send={send}\r\n              message={message}\r\n              setMessage={setMessage}\r\n              messages={messages}\r\n              setMessages={setMessages}\r\n              ws={ws}\r\n            />\r\n          ) : (\r\n            <>\r\n              <button\r\n                className=\"create-chatroom-button\"\r\n                onClick={() => setCreateChatroom(true)}\r\n              >\r\n                create chatroom\r\n              </button>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { get, post } from \"../../../../utils/http\";\r\nimport { If } from \"../../../../utils/If\";\r\n\r\nimport styled from \"styled-components\";\r\nconst StyledSection = styled(\"section\")`\r\n  background: linear-gradient(\r\n    235deg,\r\n    ${(props) => props.theme} 25%,\r\n    rgba(255, 255, 255, 1) 25%\r\n  );\r\n`;\r\n\r\nexport const ChatroomsSettings = ({\r\n  searchChatrooms,\r\n  setFetchAgain,\r\n  fetchAgain,\r\n  ws,\r\n}) => {\r\n  const [user, setUser] = useState(null);\r\n  const [activeChatroom, setActiveChatroom] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [userChatrooms, setUserChatrooms] = useState([]);\r\n  const [roomName, setRoomName] = useState(null);\r\n  const [roomMembers, setRoomMembers] = useState([]);\r\n  const [roomAdmins, setRoomAdmins] = useState([]);\r\n  const [roomTheme, setRoomTheme] = useState(null);\r\n  const [notRoomMembers, setNotRoomMembers] = useState([]);\r\n  const [searchUsersInput, setSearchUsersInput] = useState(\"\");\r\n\r\n  const fetchUser = async (signal) => {\r\n    let res = await get(`/protected/get-user`, signal);\r\n    setUser(res.data);\r\n    await fetchChatrooms(signal, res.data._id);\r\n  };\r\n\r\n  const fetchChatrooms = async (signal, userID) => {\r\n    let res = await get(`/protected/get-all-chatrooms`, signal);\r\n    setUserChatrooms(\r\n      res.data\r\n        .filter((chat) => chat.members.includes(userID))\r\n        .sort((chatA, chatB) => {\r\n          return (\r\n            chatB.starmarked.includes(userID) -\r\n            chatA.starmarked.includes(userID)\r\n          );\r\n        })\r\n    );\r\n    setLoading(false);\r\n  };\r\n\r\n  const fetchAllUsers = async (signal, activeRoom) => {\r\n    let res = await get(`/protected/get-all-users`, signal);\r\n    setRoomMembers(\r\n      res.data\r\n        .filter((u) => activeRoom.members.includes(u._id))\r\n        .sort((a, b) => {\r\n          return (\r\n            activeRoom.admins.includes(b._id) -\r\n            activeRoom.admins.includes(a._id)\r\n          );\r\n        })\r\n    );\r\n    setNotRoomMembers(\r\n      res.data.filter((u) => !activeRoom.members.includes(u._id))\r\n    );\r\n    setRoomAdmins(res.data.filter((u) => activeRoom.admins.includes(u._id)));\r\n  };\r\n\r\n  const fetchUpdateChatroom = async (roomId) => {\r\n    let newRoomAdmins = [];\r\n    roomAdmins.forEach((a) => {\r\n      newRoomAdmins.push(a._id);\r\n    });\r\n    let newRoomMembers = [];\r\n    roomMembers.forEach((m) => newRoomMembers.push(m._id));\r\n    let newRoomTheme;\r\n    if (roomTheme === null) {\r\n      newRoomTheme = activeChatroom.theme;\r\n    } else {\r\n      newRoomTheme = roomTheme;\r\n    }\r\n    let newRoomName;\r\n    if (roomName === null) {\r\n      newRoomName = activeChatroom.name;\r\n    } else {\r\n      newRoomName = roomName;\r\n    }\r\n\r\n    await post(`/protected/update-chatroom/` + roomId, {\r\n      name: newRoomName,\r\n      admins: newRoomAdmins,\r\n      members: newRoomMembers,\r\n      theme: newRoomTheme,\r\n    });\r\n    setFetchAgain(!fetchAgain);\r\n  };\r\n\r\n  const fetchDeleteChatroom = async (signal, roomId) => {\r\n    let res = await get(`/protected/delete-chatroom/` + roomId, signal);\r\n    setFetchAgain(!fetchAgain);\r\n    ws.send(\r\n      JSON.stringify({\r\n        type: \"roomsUpdate\",\r\n        detail: \"roomDelete\",\r\n      })\r\n    );\r\n  };\r\n\r\n  const fetchLeaveChatroom = async (signal, roomId) => {\r\n    let res = await post(\r\n      `/protected/leave-chatroom/` + roomId + \"/\" + user._id,\r\n      signal\r\n    );\r\n    setFetchAgain(!fetchAgain);\r\n    ws.send(\r\n      JSON.stringify({\r\n        type: \"roomsUpdate\",\r\n        detail: \"roomLeave\",\r\n        room: roomId,\r\n        user: user._id,\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(async () => {\r\n    ws.onmessage = async (e) => {\r\n      let theMessage = JSON.parse(e.data);\r\n      if (theMessage.type === \"roomsUpdate\") {\r\n        if (theMessage.detail === \"roomLeave\") {\r\n          if (\r\n            userChatrooms.some((room) => {\r\n              return room._id.includes(theMessage.room);\r\n            })\r\n          ) {\r\n            if (\r\n              activeChatroom._id === theMessage.room &&\r\n              theMessage.user !== user._id\r\n            ) {\r\n              const abortController = new AbortController();\r\n              await fetchChatrooms(abortController.signal, user._id);\r\n              setActiveChatroom(activeChatroom);\r\n            } else {\r\n              setFetchAgain(!fetchAgain);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }, [ws.onmessage]);\r\n\r\n  useEffect(async () => {\r\n    const abortController = new AbortController();\r\n    await fetchUser(abortController.signal);\r\n    return () => abortController.abort();\r\n  }, [fetchAgain]);\r\n\r\n  useEffect(async () => {\r\n    const abortController = new AbortController();\r\n    if (activeChatroom !== null)\r\n      await fetchAllUsers(abortController.signal, activeChatroom);\r\n    return () => abortController.abort();\r\n  }, [activeChatroom]);\r\n\r\n  if (loading) {\r\n    return <h2 className=\"\">Loading...</h2>;\r\n  }\r\n\r\n  return (\r\n    <section className=\"flex dash-settings-chatrooms\">\r\n      {userChatrooms.map((room) => {\r\n        return (\r\n          <If condition={room.name.includes(searchChatrooms)}>\r\n            <StyledSection\r\n              theme={room.theme}\r\n              className=\"col2-chatroom-con\"\r\n              onClick={() => {\r\n                setActiveChatroom(room);\r\n              }}\r\n            >\r\n              <h5 className=\"flex\">\r\n                {room.name}\r\n                <If condition={room.admins.includes(user._id)}>\r\n                  <span>A</span>\r\n                </If>\r\n              </h5>\r\n\r\n              {/* room active */}\r\n              <If condition={activeChatroom === room}>\r\n                {/* admin */}\r\n                <If condition={room.admins.includes(user._id)}>\r\n                  <p className=\"chat-settings-members\">\r\n                    {room.members.length} members\r\n                  </p>\r\n\r\n                  <label className=\"chat-settings-text\">Change name:</label>\r\n                  <input\r\n                    className=\"chat-settings-input-text\"\r\n                    type=\"text\"\r\n                    placeholder={room.name}\r\n                    onChange={(e) => setRoomName(e.target.value)}\r\n                  />\r\n\r\n                  <div className=\"chat-settings-text\">Members:</div>\r\n                  <div className=\"flex chat-settings-members-container\">\r\n                    {roomMembers.map((m, i) => {\r\n                      return (\r\n                        <div>\r\n                          <div className=\"flex chat-settings-current-members\">\r\n                            <div className=\"current-members\">{m.name} </div>\r\n                            <If condition={roomAdmins.includes(m)}>\r\n                              <span>A</span>\r\n                            </If>\r\n                          </div>\r\n                          <If condition={m._id !== user._id}>\r\n                            <If condition={!roomAdmins.includes(m)}>\r\n                              <div\r\n                                className=\"chat-settings-make-admin\"\r\n                                onClick={() =>\r\n                                  setRoomAdmins((prev) => {\r\n                                    return [...prev, m];\r\n                                  })\r\n                                }\r\n                              >\r\n                                adminize\r\n                              </div>\r\n                            </If>\r\n                            <If condition={!roomAdmins.includes(m)}>\r\n                              <div\r\n                                className=\"chat-settings-kick\"\r\n                                onClick={() => {\r\n                                  let newArr = roomMembers.filter(\r\n                                    (me) => me._id !== m._id\r\n                                  );\r\n                                  setRoomMembers(newArr);\r\n                                  let newArr2 = notRoomMembers;\r\n                                  if (!newArr2.includes(m)) newArr2.push(m);\r\n                                  setNotRoomMembers(newArr2);\r\n                                }}\r\n                              >\r\n                                kick\r\n                              </div>\r\n                            </If>\r\n                          </If>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                  <div className=\"flex\">\r\n                    <label className=\"chat-settings-text\">Add member:</label>\r\n                    <input\r\n                      className=\"chat-settings-input-text\"\r\n                      type=\"text\"\r\n                      placeholder=\"search member\"\r\n                      value={searchUsersInput}\r\n                      onChange={(e) => setSearchUsersInput(e.target.value)}\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <If condition={searchUsersInput !== \"\"}>\r\n                      {notRoomMembers.map((m) => {\r\n                        return (\r\n                          <If condition={m !== undefined}>\r\n                            <If\r\n                              condition={\r\n                                m.name.includes(searchUsersInput) &&\r\n                                !roomMembers.includes(m)\r\n                              }\r\n                            >\r\n                              <span\r\n                                className=\"chat-settings-add-member-user\"\r\n                                onClick={() =>\r\n                                  setRoomMembers((prev) => {\r\n                                    return [...prev, m];\r\n                                  })\r\n                                }\r\n                              >\r\n                                {m.name}\r\n                              </span>\r\n                            </If>\r\n                          </If>\r\n                        );\r\n                      })}\r\n                    </If>\r\n                  </div>\r\n\r\n                  <hr />\r\n\r\n                  <div className=\"chat-settings-text\">Color:</div>\r\n                  <div className=\"flex chat-settings-default-colors\">\r\n                    <div\r\n                      className={`settings-con-green ${\r\n                        roomTheme === \"#A2DC68\" ? \"chosen-color\" : \"\"\r\n                      }`}\r\n                      onClick={() => setRoomTheme(\"#A2DC68\")}\r\n                    ></div>\r\n                    <div\r\n                      className={`settings-con-blue ${\r\n                        roomTheme === \"#68DCC4\" ? \"chosen-color\" : \"\"\r\n                      }`}\r\n                      onClick={() => setRoomTheme(\"#68DCC4\")}\r\n                    ></div>\r\n                    <div\r\n                      className={`settings-con-purple ${\r\n                        roomTheme === \"#DC68D0\" ? \"chosen-color\" : \"\"\r\n                      }`}\r\n                      onClick={() => setRoomTheme(\"#DC68D0\")}\r\n                    ></div>\r\n                    <div\r\n                      className={`settings-con-yellow ${\r\n                        roomTheme === \"#D8DC68\" ? \"chosen-color\" : \"\"\r\n                      }`}\r\n                      onClick={() => setRoomTheme(\"#D8DC68\")}\r\n                    ></div>\r\n                  </div>\r\n\r\n                  <div className=\"flex chat-settings-color-pick\">\r\n                    <div className=\"chat-settings-text\">Pick your own:</div>\r\n                    <input\r\n                      className=\"chat-settings-color-picker\"\r\n                      type=\"color\"\r\n                      onChange={(e) => {\r\n                        e.target.classList.add(\"chosen-color\");\r\n                        setRoomTheme(e.target.value);\r\n                      }}\r\n                    />\r\n                  </div>\r\n\r\n                  <hr />\r\n\r\n                  <div\r\n                    className=\"chat-settings-delete\"\r\n                    onClick={async () => {\r\n                      const abortController = new AbortController();\r\n                      await fetchDeleteChatroom(\r\n                        abortController.signal,\r\n                        room._id\r\n                      );\r\n                      return () => abortController.abort();\r\n                    }}\r\n                  >\r\n                    <span>X</span> Delete chatroom\r\n                  </div>\r\n                  <div\r\n                    className=\"chat-settings-save\"\r\n                    onClick={() => fetchUpdateChatroom(room._id)}\r\n                  >\r\n                    SAVE\r\n                  </div>\r\n                </If>\r\n\r\n                {/* not admin */}\r\n                <If condition={!room.admins.includes(user._id)}>\r\n                  <p className=\"chat-settings-members\">\r\n                    {room.members.length} members\r\n                  </p>\r\n\r\n                  <div className=\"chat-settings-text\">Members:</div>\r\n                  <div className=\"flex chat-settings-members-container\">\r\n                    {roomMembers.map((m, i) => {\r\n                      return (\r\n                        <div>\r\n                          <div className=\"flex chat-settings-current-members\">\r\n                            <div className=\"current-members\">{m.name}</div>\r\n                            <If condition={roomAdmins.includes(m)}>\r\n                              <span>A</span>\r\n                            </If>\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                  <div className=\"flex\">\r\n                    <label className=\"chat-settings-text\">add members:</label>\r\n                    <input\r\n                      className=\"chat-settings-input-text\"\r\n                      type=\"text\"\r\n                      placeholder=\"search user\"\r\n                      value={searchUsersInput}\r\n                      onChange={(e) => setSearchUsersInput(e.target.value)}\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <If condition={searchUsersInput !== \"\"}>\r\n                      {notRoomMembers.map((m) => {\r\n                        return (\r\n                          <If condition={m !== undefined}>\r\n                            <If\r\n                              condition={\r\n                                m.name.includes(searchUsersInput) &&\r\n                                !roomMembers.includes(m)\r\n                              }\r\n                            >\r\n                              <span\r\n                                className=\"chat-settings-add-member-user\"\r\n                                onClick={() =>\r\n                                  setRoomMembers((prev) => {\r\n                                    return [...prev, m];\r\n                                  })\r\n                                }\r\n                              >\r\n                                {m.name}\r\n                              </span>\r\n                            </If>\r\n                          </If>\r\n                        );\r\n                      })}\r\n                    </If>\r\n                  </div>\r\n\r\n                  <hr />\r\n\r\n                  <div className=\"chat-settings-text\">color:</div>\r\n                  <div className=\"flex chat-settings-default-colors\">\r\n                    <div\r\n                      className={`settings-con-green ${\r\n                        roomTheme === \"#A2DC68\" ? \"chosen-color\" : \"\"\r\n                      }`}\r\n                      onClick={() => setRoomTheme(\"#A2DC68\")}\r\n                    ></div>\r\n                    <div\r\n                      className={`settings-con-blue ${\r\n                        roomTheme === \"#68DCC4\" ? \"chosen-color\" : \"\"\r\n                      }`}\r\n                      onClick={() => setRoomTheme(\"#68DCC4\")}\r\n                    ></div>\r\n                    <div\r\n                      className={`settings-con-purple ${\r\n                        roomTheme === \"#DC68D0\" ? \"chosen-color\" : \"\"\r\n                      }`}\r\n                      onClick={() => setRoomTheme(\"#DC68D0\")}\r\n                    ></div>\r\n                    <div\r\n                      className={`settings-con-yellow ${\r\n                        roomTheme === \"#D8DC68\" ? \"chosen-color\" : \"\"\r\n                      }`}\r\n                      onClick={() => setRoomTheme(\"#D8DC68\")}\r\n                    ></div>\r\n                  </div>\r\n\r\n                  <div className=\"flex chat-settings-color-pick\">\r\n                    <div className=\"chat-settings-text\">pick:</div>\r\n                    <input\r\n                      className=\"chat-settings-color-picker\"\r\n                      type=\"color\"\r\n                      onChange={(e) => setRoomTheme(e.target.value)}\r\n                    />\r\n                  </div>\r\n\r\n                  <hr />\r\n                  <div\r\n                    className=\"chat-settings-delete\"\r\n                    onClick={async () => {\r\n                      const abortController = new AbortController();\r\n                      await fetchLeaveChatroom(\r\n                        abortController.signal,\r\n                        room._id\r\n                      );\r\n                      return () => abortController.abort();\r\n                    }}\r\n                  >\r\n                    <span>X</span> Leave chatroom\r\n                  </div>\r\n                  <div\r\n                    className=\"chat-settings-save\"\r\n                    onClick={() => fetchUpdateChatroom(room._id)}\r\n                  >\r\n                    SAVE\r\n                  </div>\r\n                </If>\r\n              </If>\r\n            </StyledSection>\r\n          </If>\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n};\r\n\r\n// admin and notadmin combined\r\n{\r\n  /* <If condition={activeChatroom === room}>\r\n  <p>{room.members.length} members</p>\r\n  <If condition={room.admins.includes(user._id)}>\r\n    <label>name:</label>\r\n    <input\r\n      type=\"text\"\r\n      placeholder={room.name}\r\n      // value={roomName}\r\n      onChange={(e) => setRoomName(e.target.value)}\r\n    />\r\n  </If>\r\n\r\n  <div>Members:</div>\r\n  <div className=\"flex\">\r\n    {roomMembers.map((m, i) => {\r\n      return (\r\n        <div>\r\n          <div>\r\n            {m.name}\r\n            <If condition={roomAdmins.includes(m)}>\r\n              <span>A</span>\r\n            </If>\r\n          </div>\r\n          <If condition={room.admins.includes(user._id) && m._id !== user._id}>\r\n            <If condition={!roomAdmins.includes(m)}>\r\n              <div\r\n                onClick={() =>\r\n                  setRoomAdmins((prev) => {\r\n                    return [...prev, m];\r\n                  })\r\n                }\r\n              >\r\n                make admin\r\n              </div>\r\n            </If>\r\n            <If condition={!roomAdmins.includes(m)}>\r\n              <div\r\n                onClick={() => {\r\n                  let newArr = roomMembers.filter((me) => me._id !== m._id);\r\n                  setRoomMembers(newArr);\r\n                  let newArr2 = notRoomMembers;\r\n                  if (!newArr2.includes(m)) newArr2.push(m);\r\n                  setNotRoomMembers(newArr2);\r\n                  // setNotRoomMembers((prev) => {\r\n                  //   if (!prev.includes(m)) {\r\n                  //     return [...prev, m];\r\n                  //   } else {\r\n                  //     return [prev];\r\n                  //   }\r\n                  // });\r\n                }}\r\n              >\r\n                kick\r\n              </div>\r\n            </If>\r\n          </If>\r\n        </div>\r\n      );\r\n    })}\r\n  </div>\r\n  <div className=\"flex\">\r\n    <label>search not members:</label>\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"search user\"\r\n      value={searchUsersInput}\r\n      onChange={(e) => setSearchUsersInput(e.target.value)}\r\n    />\r\n  </div>\r\n  <div>\r\n    <If condition={searchUsersInput !== \"\"}>\r\n      {notRoomMembers.map((m) => {\r\n        console.log(m);\r\n        console.log(\"notmembers\", notRoomMembers);\r\n        console.log(\"members\", roomMembers);\r\n\r\n        return (\r\n          <If condition={m !== undefined}>\r\n            <If\r\n              condition={\r\n                m.name.includes(searchUsersInput) && !roomMembers.includes(m)\r\n              }\r\n            >\r\n              <span\r\n                onClick={() =>\r\n                  setRoomMembers((prev) => {\r\n                    return [...prev, m];\r\n                  })\r\n                }\r\n              >\r\n                {m.name}\r\n              </span>\r\n            </If>\r\n          </If>\r\n        );\r\n      })}\r\n    </If>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  <div>color:</div>\r\n  <div className=\"flex\">\r\n    <div onClick={() => setRoomTheme(\"#A2DC68\")}>greenC</div>\r\n    <div onClick={() => setRoomTheme(\"#68DCC4\")}>blueC</div>\r\n    <div onClick={() => setRoomTheme(\"#DC68D0\")}>purpleC</div>\r\n    <div onClick={() => setRoomTheme(\"#D8DC68\")}>yellowC</div>\r\n  </div>\r\n\r\n  <input type=\"color\" onChange={(e) => setRoomTheme(e.target.value)} />\r\n\r\n  <hr />\r\n  <div onClick={() => fetchUpdateChatroom(room._id)}>save</div>\r\n  {/* <div onClick={() => setChatSettingsToggle(null)}>save</div> */\r\n}\r\n//   {roomAdmins.includes(user) ? (\r\n//     <div\r\n//       onClick={async () => {\r\n//         const abortController = new AbortController();\r\n//         await fetchDeleteChatroom(abortController.signal, room._id);\r\n//         return () => abortController.abort();\r\n//       }}\r\n//     >\r\n//       <span>icon</span> Delete chatroom\r\n//     </div>\r\n//   ) : (\r\n//     <div>\r\n//       <span>icon</span> Leave chatroom\r\n//     </div>\r\n//   )}\r\n// </If>; */}\r\n// ----------------------------------------------\r\n\r\n// const Chatroom = ({\r\n//   user,\r\n//   room,\r\n//   chatSettingsToggle,\r\n//   setChatSettingsToggle,\r\n//   setFetchAgain,\r\n//   fetchAgain,\r\n// }) => {\r\n//   const [searchUsersInput, setSearchUsersInput] = useState(\"\");\r\n//   const [roomAdmins, setRoomAdmins] = useState([]);\r\n//   const [notRoomAdmins, setNotRoomAdmins] = useState([]);\r\n//   const [roomMembers, setRoomMembers] = useState([]);\r\n//   const [notRoomMembers, setNotRoomMembers] = useState([]);\r\n//   const [isAdmin, setIsAdmin] = useState(null);\r\n\r\n//   const [roomName, setRoomName] = useState(\"\");\r\n//   const [newRoomTheme, setNewRoomTheme] = useState(room.theme);\r\n\r\n//   const fetchAllUsers = async (signal) => {\r\n//     let res = await get(`/protected/get-all-users`, signal);\r\n//     setRoomMembers(\r\n//       res.data\r\n//         .filter((u) => room.members.includes(u._id))\r\n//         .sort((a, b) => {\r\n//           return room.admins.includes(b._id) - room.admins.includes(a._id);\r\n//         })\r\n//     );\r\n//     setNotRoomMembers(res.data.filter((u) => !room.members.includes(u._id)));\r\n\r\n//     setRoomAdmins(res.data.filter((u) => room.admins.includes(u._id)));\r\n//     setNotRoomAdmins(res.data.filter((u) => !room.admins.includes(u._id)));\r\n//   };\r\n\r\n//   const fetchDeleteChatroom = async (signal) => {\r\n//     const abortController = new AbortController();\r\n//     let res = await get(`/protected/delete-chatroom/` + room._id, signal);\r\n//     setFetchAgain(!fetchAgain);\r\n//     return () => abortController.abort();\r\n//   };\r\n\r\n//   const fetchUpdateChatroom = async () => {\r\n//     let newRoomAdmins = [];\r\n//     roomAdmins.forEach((a) => {\r\n//       newRoomAdmins.push(a._id);\r\n//       console.log(a._id);\r\n//     });\r\n\r\n//     let newRoomMembers = [];\r\n//     roomMembers.forEach((m) => newRoomMembers.push(m._id));\r\n\r\n//     // let newRoomName = room.name;\r\n//     // if (roomName !== room.name && roomName !== \"\") {\r\n//     //   newRoomName = roomName;\r\n//     // }\r\n//     await post(`/protected/update-chatroom/` + room._id, {\r\n//       name: roomName,\r\n//       admins: newRoomAdmins,\r\n//       members: newRoomMembers,\r\n//       theme: newRoomTheme,\r\n//     });\r\n//     setFetchAgain(!fetchAgain);\r\n//   };\r\n\r\n//   const StyledSection = styled.section`\r\n//     background: linear-gradient(\r\n//       235deg,\r\n//       ${room.theme} 25%,\r\n//       rgba(255, 255, 255, 1) 25%\r\n//     );\r\n//   `;\r\n\r\n//   useEffect(async () => {\r\n//     const abortController = new AbortController();\r\n//     await fetchAllUsers(abortController.signal);\r\n//     return () => abortController.abort();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     setIsAdmin(room.admins.includes(user._id));\r\n//   }, []);\r\n\r\n//   return (\r\n//     <StyledSection\r\n//       onClick={() => {\r\n//         setChatSettingsToggle(room._id);\r\n//       }}\r\n//       className=\"col2-chatroom-con\"\r\n//     >\r\n//       <h5>\r\n//         {room.name}\r\n//         <If condition={isAdmin}>\r\n//           <span>admin</span>\r\n//         </If>\r\n//       </h5>\r\n//       <If condition={chatSettingsToggle === room._id}>\r\n//         <p>{room.members.length} members</p>\r\n//         <If condition={isAdmin}>\r\n//           <label>name:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder={room.name}\r\n//             // value={roomName}\r\n//             onChange={(e) => setRoomName(e.target.value)}\r\n//           />\r\n//         </If>\r\n\r\n//         <div>Members:</div>\r\n//         <div className=\"flex\">\r\n//           {roomMembers.map((m, i) => {\r\n//             return (\r\n//               <div>\r\n//                 <div>\r\n//                   {m.name}\r\n//                   <If condition={roomAdmins.includes(m)}>\r\n//                     <span>A</span>\r\n//                   </If>\r\n//                 </div>\r\n//                 <If condition={isAdmin && m._id !== user._id}>\r\n//                   <If condition={!roomAdmins.includes(m)}>\r\n//                     <div\r\n//                       onClick={() =>\r\n//                         setRoomAdmins((prev) => {\r\n//                           return [...prev, m];\r\n//                         })\r\n//                       }\r\n//                     >\r\n//                       make admin\r\n//                     </div>\r\n//                   </If>\r\n//                   <If condition={!roomAdmins.includes(m)}>\r\n//                     <div\r\n//                       onClick={() => {\r\n//                         let newArr = roomMembers.filter(\r\n//                           (me) => me._id !== m._id\r\n//                         );\r\n//                         setRoomMembers(newArr);\r\n//                       }}\r\n//                     >\r\n//                       kick\r\n//                     </div>\r\n//                   </If>\r\n//                 </If>\r\n//               </div>\r\n//             );\r\n//           })}\r\n//         </div>\r\n//         <div className=\"flex\">\r\n//           <label>search not members:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"search user\"\r\n//             onChange={(e) => setSearchUsersInput(e.target.value)}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <If condition={searchUsersInput !== \"\"}>\r\n//             {notRoomMembers.map((m) => {\r\n//               return (\r\n//                 <If\r\n//                   condition={\r\n//                     m.name.includes(searchUsersInput) &&\r\n//                     !roomMembers.includes(m)\r\n//                   }\r\n//                 >\r\n//                   <span\r\n//                     onClick={() =>\r\n//                       setRoomMembers((prev) => {\r\n//                         return [...prev, m];\r\n//                       })\r\n//                     }\r\n//                   >\r\n//                     {m.name}\r\n//                   </span>\r\n//                 </If>\r\n//               );\r\n//             })}\r\n//           </If>\r\n//         </div>\r\n\r\n//         <hr />\r\n\r\n//         <div>color:</div>\r\n//         <div className=\"flex\">\r\n//           <div onClick={() => setNewRoomTheme(\"#A2DC68\")}>greenC</div>\r\n//           <div onClick={() => setNewRoomTheme(\"#68DCC4\")}>blueC</div>\r\n//           <div onClick={() => setNewRoomTheme(\"#DC68D0\")}>purpleC</div>\r\n//           <div onClick={() => setNewRoomTheme(\"#D8DC68\")}>yellowC</div>\r\n//         </div>\r\n\r\n//         <input type=\"color\" onChange={(e) => setNewRoomTheme(e.target.value)} />\r\n\r\n//         <hr />\r\n//         <div onClick={() => fetchUpdateChatroom()}>save</div>\r\n//         {/* <div onClick={() => setChatSettingsToggle(null)}>save</div> */}\r\n//         {isAdmin ? (\r\n//           <div\r\n//             onClick={() => {\r\n//               fetchDeleteChatroom();\r\n//             }}\r\n//           >\r\n//             <span>icon</span> Delete chatroom\r\n//           </div>\r\n//         ) : (\r\n//           <div>\r\n//             <span>icon</span> Leave chatroom\r\n//           </div>\r\n//         )}\r\n//       </If>\r\n//     </StyledSection>\r\n//   );\r\n// };\r\n\r\n// before\r\n\r\n// export const ChatroomsSettings = ({\r\n//   user,\r\n//   userChatrooms,\r\n//   searchChatrooms,\r\n//   setFetchAgain,\r\n//   fetchAgain,\r\n// }) => {\r\n//   const [chatSettingsToggle, setChatSettingsToggle] = useState(null);\r\n\r\n//   return (\r\n//     <section className=\"flex dash-settings-chatrooms\">\r\n//       {userChatrooms.map((room) => {\r\n//         return (\r\n//           <If condition={room.name.includes(searchChatrooms)}>\r\n//             <Chatroom\r\n//               user={user}\r\n//               room={room}\r\n//               chatSettingsToggle={chatSettingsToggle}\r\n//               setChatSettingsToggle={setChatSettingsToggle}\r\n//               setFetchAgain={setFetchAgain}\r\n//               fetchAgain={fetchAgain}\r\n//             />\r\n//           </If>\r\n//         );\r\n//       })}\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// const Chatroom = ({\r\n//   user,\r\n//   room,\r\n//   chatSettingsToggle,\r\n//   setChatSettingsToggle,\r\n//   setFetchAgain,\r\n//   fetchAgain,\r\n// }) => {\r\n//   const [searchUsersInput, setSearchUsersInput] = useState(\"\");\r\n//   const [roomAdmins, setRoomAdmins] = useState([]);\r\n//   const [notRoomAdmins, setNotRoomAdmins] = useState([]);\r\n//   const [roomMembers, setRoomMembers] = useState([]);\r\n//   const [notRoomMembers, setNotRoomMembers] = useState([]);\r\n//   const [isAdmin, setIsAdmin] = useState(null);\r\n\r\n//   const [roomName, setRoomName] = useState(\"\");\r\n//   const [newRoomTheme, setNewRoomTheme] = useState(room.theme);\r\n\r\n//   const fetchAllUsers = async (signal) => {\r\n//     let res = await get(`/protected/get-all-users`, signal);\r\n//     setRoomMembers(\r\n//       res.data\r\n//         .filter((u) => room.members.includes(u._id))\r\n//         .sort((a, b) => {\r\n//           return room.admins.includes(b._id) - room.admins.includes(a._id);\r\n//         })\r\n//     );\r\n//     setNotRoomMembers(res.data.filter((u) => !room.members.includes(u._id)));\r\n\r\n//     setRoomAdmins(res.data.filter((u) => room.admins.includes(u._id)));\r\n//     setNotRoomAdmins(res.data.filter((u) => !room.admins.includes(u._id)));\r\n//   };\r\n\r\n//   const fetchDeleteChatroom = async (signal) => {\r\n//     const abortController = new AbortController();\r\n//     let res = await get(`/protected/delete-chatroom/` + room._id, signal);\r\n//     setFetchAgain(!fetchAgain);\r\n//     return () => abortController.abort();\r\n//   };\r\n\r\n//   const fetchUpdateChatroom = async () => {\r\n//     let newRoomAdmins = [];\r\n//     roomAdmins.forEach((a) => {\r\n//       newRoomAdmins.push(a._id);\r\n//       console.log(a._id);\r\n//     });\r\n\r\n//     let newRoomMembers = [];\r\n//     roomMembers.forEach((m) => newRoomMembers.push(m._id));\r\n\r\n//     // let newRoomName = room.name;\r\n//     // if (roomName !== room.name && roomName !== \"\") {\r\n//     //   newRoomName = roomName;\r\n//     // }\r\n//     await post(`/protected/update-chatroom/` + room._id, {\r\n//       name: roomName,\r\n//       admins: newRoomAdmins,\r\n//       members: newRoomMembers,\r\n//       theme: newRoomTheme,\r\n//     });\r\n//     setFetchAgain(!fetchAgain);\r\n//   };\r\n\r\n//   const StyledSection = styled.section`\r\n//     background: linear-gradient(\r\n//       235deg,\r\n//       ${room.theme} 25%,\r\n//       rgba(255, 255, 255, 1) 25%\r\n//     );\r\n//   `;\r\n\r\n//   useEffect(async () => {\r\n//     const abortController = new AbortController();\r\n//     await fetchAllUsers(abortController.signal);\r\n//     return () => abortController.abort();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     setIsAdmin(room.admins.includes(user._id));\r\n//   }, []);\r\n\r\n//   return (\r\n//     <StyledSection\r\n//       onClick={() => {\r\n//         setChatSettingsToggle(room._id);\r\n//       }}\r\n//       className=\"col2-chatroom-con\"\r\n//     >\r\n//       <h5>\r\n//         {room.name}\r\n//         <If condition={isAdmin}>\r\n//           <span>admin</span>\r\n//         </If>\r\n//       </h5>\r\n//       <If condition={chatSettingsToggle === room._id}>\r\n//         <p>{room.members.length} members</p>\r\n//         <If condition={isAdmin}>\r\n//           <label>name:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder={room.name}\r\n//             // value={roomName}\r\n//             onChange={(e) => setRoomName(e.target.value)}\r\n//           />\r\n//         </If>\r\n\r\n//         <div>Members:</div>\r\n//         <div className=\"flex\">\r\n//           {roomMembers.map((m, i) => {\r\n//             return (\r\n//               <div>\r\n//                 <div>\r\n//                   {m.name}\r\n//                   <If condition={roomAdmins.includes(m)}>\r\n//                     <span>A</span>\r\n//                   </If>\r\n//                 </div>\r\n//                 <If condition={isAdmin && m._id !== user._id}>\r\n//                   <If condition={!roomAdmins.includes(m)}>\r\n//                     <div\r\n//                       onClick={() =>\r\n//                         setRoomAdmins((prev) => {\r\n//                           return [...prev, m];\r\n//                         })\r\n//                       }\r\n//                     >\r\n//                       make admin\r\n//                     </div>\r\n//                   </If>\r\n//                   <If condition={!roomAdmins.includes(m)}>\r\n//                     <div\r\n//                       onClick={() => {\r\n//                         let newArr = roomMembers.filter(\r\n//                           (me) => me._id !== m._id\r\n//                         );\r\n//                         setRoomMembers(newArr);\r\n//                       }}\r\n//                     >\r\n//                       kick\r\n//                     </div>\r\n//                   </If>\r\n//                 </If>\r\n//               </div>\r\n//             );\r\n//           })}\r\n//         </div>\r\n//         <div className=\"flex\">\r\n//           <label>search not members:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"search user\"\r\n//             onChange={(e) => setSearchUsersInput(e.target.value)}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <If condition={searchUsersInput !== \"\"}>\r\n//             {notRoomMembers.map((m) => {\r\n//               return (\r\n//                 <If\r\n//                   condition={\r\n//                     m.name.includes(searchUsersInput) &&\r\n//                     !roomMembers.includes(m)\r\n//                   }\r\n//                 >\r\n//                   <span\r\n//                     onClick={() =>\r\n//                       setRoomMembers((prev) => {\r\n//                         return [...prev, m];\r\n//                       })\r\n//                     }\r\n//                   >\r\n//                     {m.name}\r\n//                   </span>\r\n//                 </If>\r\n//               );\r\n//             })}\r\n//           </If>\r\n//         </div>\r\n\r\n//         <hr />\r\n\r\n//         <div>color:</div>\r\n//         <div className=\"flex\">\r\n//           <div onClick={() => setNewRoomTheme(\"#A2DC68\")}>greenC</div>\r\n//           <div onClick={() => setNewRoomTheme(\"#68DCC4\")}>blueC</div>\r\n//           <div onClick={() => setNewRoomTheme(\"#DC68D0\")}>purpleC</div>\r\n//           <div onClick={() => setNewRoomTheme(\"#D8DC68\")}>yellowC</div>\r\n//         </div>\r\n\r\n//         <input type=\"color\" onChange={(e) => setNewRoomTheme(e.target.value)} />\r\n\r\n//         <hr />\r\n//         <div onClick={() => fetchUpdateChatroom()}>save</div>\r\n//         {/* <div onClick={() => setChatSettingsToggle(null)}>save</div> */}\r\n//         {isAdmin ? (\r\n//           <div\r\n//             onClick={() => {\r\n//               fetchDeleteChatroom();\r\n//             }}\r\n//           >\r\n//             <span>icon</span> Delete chatroom\r\n//           </div>\r\n//         ) : (\r\n//           <div>\r\n//             <span>icon</span> Leave chatroom\r\n//           </div>\r\n//         )}\r\n//       </If>\r\n//     </StyledSection>\r\n//   );\r\n// };\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { post, get } from \"../../../../utils/http\";\r\nimport { If } from \"../../../../utils/If\";\r\nimport avatars from \"../../../../utils/avatars\";\r\n\r\nimport styled from \"styled-components\";\r\nconst StyledDiv = styled(\"div\")`\r\n  background-image: url(../avatars/${(props) => props.img});\r\n`;\r\n\r\nexport const UserSettings = ({ fetchAgain, setFetchAgain }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [avatarSwitch, setAvatarSwitch] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [avatar, setAvatar] = useState(null);\r\n  const [theme, setTheme] = useState(null);\r\n  const [name, setName] = useState(null);\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [currentPassword, setCurrentPassword] = useState(\"\");\r\n\r\n  const fetchUser = async (signal) => {\r\n    let res = await get(`/protected/get-user`, signal);\r\n    setUser(res.data);\r\n    setName(res.data.name);\r\n    setAvatar([res.data.avatar, 0]);\r\n    setTheme(res.data.theme);\r\n    setLoading(false);\r\n  };\r\n\r\n  const fetchUpdateUser = async () => {\r\n    let res = await post(`/protected/update-user/${user._id}`, {\r\n      name: name,\r\n      newPassword: newPassword,\r\n      currentPassword: currentPassword,\r\n      avatar: avatar[0],\r\n      avatarChange: avatar[1],\r\n      theme: theme,\r\n    });\r\n    setFetchAgain(!fetchAgain);\r\n  };\r\n\r\n  useEffect(async () => {\r\n    const abortController = new AbortController();\r\n    await fetchUser(abortController.signal);\r\n    return () => abortController.abort();\r\n  }, [fetchAgain]);\r\n\r\n  if (loading) {\r\n    return <h2 className=\"\">Loading...</h2>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"col3-settings-con\">\r\n      <div className=\"user-settings-input-con\">\r\n        <label className=\"user-settings-text\" htmlFor=\"name\">\r\n          Name:\r\n        </label>\r\n        <input\r\n          className=\"user-settings-input\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"user-settings-input-con\">\r\n        <label className=\"user-settings-text\" htmlFor=\"newPassword\">\r\n          New password:\r\n        </label>\r\n        <input\r\n          className=\"user-settings-input\"\r\n          type=\"password\"\r\n          name=\"newPassword\"\r\n          onChange={(e) => setNewPassword(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"user-settings-input-con\">\r\n        <label className=\"user-settings-text\" htmlFor=\"password\">\r\n          Current password:\r\n        </label>\r\n        <input\r\n          className=\"user-settings-input\"\r\n          type=\"password\"\r\n          name=\"password\"\r\n          onChange={(e) => setCurrentPassword(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"flex user-settings-input-con\">\r\n        <label className=\"user-settings-text\" htmlFor=\"theme\">\r\n          Theme:\r\n        </label>\r\n        <div className=\"flex user-settings-themes\">\r\n          <div\r\n            className=\"user-settings-theme-1\"\r\n            onClick={() => setTheme(0)}\r\n          ></div>\r\n          <div\r\n            className=\"user-settings-theme-2\"\r\n            onClick={() => setTheme(1)}\r\n          ></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex user-settings-input-con\">\r\n        <label className=\"user-settings-text\" htmlFor=\"avatar\">\r\n          Avatar:\r\n        </label>\r\n        <StyledDiv img={avatar[0]} className=\"chosen-avatar\"></StyledDiv>\r\n        <button\r\n          className=\"change-avatar-button\"\r\n          onClick={() => setAvatarSwitch(!avatarSwitch)}\r\n        >\r\n          Change\r\n        </button>\r\n      </div>\r\n      <If condition={avatarSwitch}>\r\n        <div className=\"flex avatars-con\">\r\n          {avatars.map((a) => {\r\n            return (\r\n              <StyledDiv\r\n                img={a}\r\n                className={`avatars ${a === avatar[0] ? \"current-avatar\" : \"\"}`}\r\n                onClick={() => setAvatar([a, 1])}\r\n              ></StyledDiv>\r\n            );\r\n          })}\r\n        </div>\r\n      </If>\r\n      <div className=\"user-settings-save-con\">\r\n        <button\r\n          className=\"user-settings-save-button\"\r\n          onClick={() => fetchUpdateUser()}\r\n        >\r\n          SAVE\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { api_address, get } from \"../../../utils/http\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nexport const Nav = ({\r\n  setDashboardNavState,\r\n  dashboardNavState,\r\n  createChatroom,\r\n  setCreateChatroom,\r\n}) => {\r\n  const history = useHistory();\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    history.push(\"/\", null);\r\n  };\r\n  return (\r\n    <section className=\"flex col1-nav-con\">\r\n      <div\r\n        className=\"flex nav-con-li\"\r\n        onClick={async () => {\r\n          setDashboardNavState(\"home\");\r\n          if (createChatroom) setCreateChatroom(false);\r\n        }}\r\n      >\r\n        <span>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"31.827\"\r\n            height=\"28.927\"\r\n            viewBox=\"0 0 31.827 28.927\"\r\n          >\r\n            <g\r\n              id=\"Component_3_1\"\r\n              data-name=\"Component 3 – 1\"\r\n              transform=\"translate(1.414 1)\"\r\n            >\r\n              <g id=\"home-outline\" transform=\"translate(0 0)\">\r\n                <path\r\n                  id=\"Path_1\"\r\n                  data-name=\"Path 1\"\r\n                  d=\"M80,212v15.028a1.03,1.03,0,0,0,1.04,1.019h6.242v-8.66a1.545,1.545,0,0,1,1.56-1.528h5.2a1.545,1.545,0,0,1,1.56,1.528v8.66h6.242a1.03,1.03,0,0,0,1.04-1.019V212\"\r\n                  transform=\"translate(-76.944 -201.119)\"\r\n                  fill=\"none\"\r\n                  stroke=\"#fff\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                />\r\n                <path\r\n                  id=\"Path_2\"\r\n                  data-name=\"Path 2\"\r\n                  d=\"M61,61.261,47.2,48.271a1.107,1.107,0,0,0-1.41,0L32,61.261\"\r\n                  transform=\"translate(-32 -48.017)\"\r\n                  fill=\"none\"\r\n                  stroke=\"#fff\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                />\r\n                <path\r\n                  id=\"Path_3\"\r\n                  data-name=\"Path 3\"\r\n                  d=\"M355.056,71.323V64H352v4.394\"\r\n                  transform=\"translate(-331.245 -62.982)\"\r\n                  fill=\"none\"\r\n                  stroke=\"#fff\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                />\r\n              </g>\r\n            </g>\r\n          </svg>\r\n        </span>\r\n        <div className=\"nav-con-home\">HOME</div>\r\n      </div>\r\n      <div\r\n        className=\"flex nav-con-li\"\r\n        onClick={() => {\r\n          setDashboardNavState(\"settings\");\r\n          if (createChatroom) setCreateChatroom(false);\r\n        }}\r\n      >\r\n        <span>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"31.116\"\r\n            height=\"31.834\"\r\n            viewBox=\"0 0 31.116 31.834\"\r\n          >\r\n            <g\r\n              id=\"Component_4_1\"\r\n              data-name=\"Component 4 – 1\"\r\n              transform=\"translate(1.058 1)\"\r\n            >\r\n              <g id=\"settings-outline\">\r\n                <path\r\n                  id=\"settings-outline-2\"\r\n                  data-name=\"settings-outline\"\r\n                  d=\"M62.924,52.478a4.461,4.461,0,1,0,4,4A4.461,4.461,0,0,0,62.924,52.478Zm10.742,4.44a10.758,10.758,0,0,1-.107,1.449l3.151,2.472a.754.754,0,0,1,.171.958L73.9,66.955a.754.754,0,0,1-.916.32l-3.13-1.26a1.123,1.123,0,0,0-1.057.122,11.465,11.465,0,0,1-1.5.874,1.111,1.111,0,0,0-.615.846L66.211,71.2a.772.772,0,0,1-.744.639H59.5a.774.774,0,0,1-.745-.618l-.468-3.333a1.12,1.12,0,0,0-.627-.852,10.824,10.824,0,0,1-1.5-.876,1.115,1.115,0,0,0-1.053-.119L51.985,67.3a.754.754,0,0,1-.916-.319l-2.981-5.158a.753.753,0,0,1,.171-.958l2.663-2.091a1.119,1.119,0,0,0,.418-.981c-.025-.291-.04-.581-.04-.871s.015-.576.04-.861a1.115,1.115,0,0,0-.423-.972l-2.662-2.091a.754.754,0,0,1-.165-.954l2.981-5.158a.754.754,0,0,1,.916-.32l3.13,1.26a1.123,1.123,0,0,0,1.057-.122,11.465,11.465,0,0,1,1.5-.874,1.111,1.111,0,0,0,.615-.846l.469-3.338A.772.772,0,0,1,59.5,42h5.963a.774.774,0,0,1,.745.618l.468,3.333a1.12,1.12,0,0,0,.627.852,10.826,10.826,0,0,1,1.5.876,1.115,1.115,0,0,0,1.053.119l3.129-1.26a.754.754,0,0,1,.916.319l2.981,5.158a.753.753,0,0,1-.171.958l-2.663,2.091a1.119,1.119,0,0,0-.422.981C73.65,56.337,73.665,56.627,73.665,56.917Z\"\r\n                  transform=\"translate(-47.985 -42)\"\r\n                  fill=\"none\"\r\n                  stroke=\"#fff\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                />\r\n              </g>\r\n            </g>\r\n          </svg>\r\n        </span>\r\n        <div>SETTINGS</div>\r\n      </div>\r\n      <div onClick={logout} className=\"flex nav-con-li\">\r\n        <span>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"31\"\r\n            height=\"26.167\"\r\n            viewBox=\"0 0 31 26.167\"\r\n          >\r\n            <g id=\"log-out-outline\" transform=\"translate(1 1)\">\r\n              <path\r\n                id=\"Path_11\"\r\n                data-name=\"Path 11\"\r\n                d=\"M81.969,114.125v3.021a3.008,3.008,0,0,1-2.995,3.021H66.995A3.008,3.008,0,0,1,64,117.146V99.021A3.008,3.008,0,0,1,66.995,96h11.38c1.654,0,3.594,1.353,3.594,3.021v3.021\"\r\n                transform=\"translate(-64 -96)\"\r\n                fill=\"none\"\r\n                stroke=\"#fff\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n              />\r\n              <path\r\n                id=\"Path_12\"\r\n                data-name=\"Path 12\"\r\n                d=\"M368,187.979l5.99-5.99L368,176\"\r\n                transform=\"translate(-344.99 -169.906)\"\r\n                fill=\"none\"\r\n                stroke=\"#fff\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n              />\r\n              <line\r\n                id=\"Line_1\"\r\n                data-name=\"Line 1\"\r\n                x2=\"19\"\r\n                transform=\"translate(8.625 12.083)\"\r\n                fill=\"none\"\r\n                stroke=\"#fff\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth=\"2\"\r\n              />\r\n            </g>\r\n          </svg>\r\n        </span>\r\n        <div>LOG OUT</div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledDiv = styled(\"div\")`\r\n  background-image: url(../avatars/${(props) => props.img});\r\n`;\r\n\r\nexport const UserAvatar = ({ user }) => {\r\n  return (\r\n    <section className=\"flex col1-user-con\">\r\n      <StyledDiv\r\n        img={user.avatar}\r\n        className=\"height100 user-con-avatar\"\r\n      ></StyledDiv>\r\n      <div className=\" flex user-con-user-name\">{user.name}</div>\r\n    </section>\r\n  );\r\n};\r\n","import { If } from \"../../../utils/If\";\r\n\r\nexport const SearchChatrooms = ({ page, setCheckbox, setSearchChatrooms }) => {\r\n  return (\r\n    <section className=\"flex search-chatroom-con\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"search chatrooms\"\r\n        onInput={(e) => setSearchChatrooms(e.target.value)}\r\n      />\r\n\r\n      <If condition={page === \"home\"}>\r\n        <div className=\"flex\">\r\n          <label htmlFor=\"searchJoinableChatroomsCheckbox\">all:</label>\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"searchJoinableChatroomsCheckbox\"\r\n            onChange={(e) => setCheckbox(e.target.checked)}\r\n          />\r\n        </div>\r\n      </If>\r\n    </section>\r\n  );\r\n};\r\n","import { Col, Row } from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { ChatroomsSettings } from \"./settings/ChatroomsSettings\";\r\nimport { UserSettings } from \"./settings/UserSettings\";\r\nimport { SearchChatrooms } from \"./SearchChatrooms\";\r\nimport { UserAvatar } from \"./UserAvatar\";\r\nimport { Nav } from \"./Nav\";\r\n\r\nexport const PageSettings = ({\r\n  setSearchChatrooms,\r\n  dashboardNavState,\r\n  setDashboardNavState,\r\n  searchChatrooms,\r\n  user,\r\n  setFetchAgain,\r\n  fetchAgain,\r\n  setActiveChatroom,\r\n  activeChatroom,\r\n  ws,\r\n}) => {\r\n  const [W, setW] = useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    let changeW = window.addEventListener(\"resize\", () =>\r\n      setW(window.innerWidth)\r\n    );\r\n    return window.removeEventListener(\"resize\", changeW);\r\n  }, [W]);\r\n\r\n  return (\r\n    <Row className=\"dashboard-con\">\r\n      <Col\r\n        lg={{ span: 2, order: 1 }}\r\n        md={{ span: 2, order: 1 }}\r\n        xs={{ span: 12, order: 1 }}\r\n        className=\"flex dashboard-con-col1\"\r\n      >\r\n        <UserAvatar user={user} />\r\n        <Nav\r\n          setDashboardNavState={setDashboardNavState}\r\n          dashboardNavState={dashboardNavState}\r\n        />\r\n      </Col>\r\n      <Col\r\n        lg={{ span: 6, order: 2 }}\r\n        md={{ span: 6, order: 2 }}\r\n        xs={{ span: 12, order: 2 }}\r\n        className=\"dashboard-con-col2\"\r\n      >\r\n        <h4>Chatrooms</h4>\r\n\r\n        <SearchChatrooms\r\n          setSearchChatrooms={setSearchChatrooms}\r\n          page={dashboardNavState}\r\n        />\r\n        <ChatroomsSettings\r\n          ws={ws}\r\n          searchChatrooms={searchChatrooms}\r\n          setFetchAgain={setFetchAgain}\r\n          fetchAgain={fetchAgain}\r\n          activeChatroom={activeChatroom}\r\n          setActiveChatroom={setActiveChatroom}\r\n        />\r\n      </Col>\r\n      <Col\r\n        lg={{ span: 4, order: 3 }}\r\n        md={{ span: 4, order: 3 }}\r\n        xs={{ span: 12, order: 3 }}\r\n        className=\"dashboard-con-col3\"\r\n      >\r\n        <UserSettings\r\n          user={user}\r\n          setFetchAgain={setFetchAgain}\r\n          fetchAgain={fetchAgain}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { api_address, get, post } from \"../../utils/http\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\n\r\nimport { useParams } from \"react-router\";\r\n\r\nimport { breakpoints } from \"../../utils/breakpoints\";\r\nimport { parse } from \"../../utils/parse\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nimport { If } from \"../../utils/If\";\r\n\r\nimport { WS } from \"../../js/ws\";\r\nimport { ChatroomsHome } from \"./dashboard-comps/home/ChatroomsHome\";\r\nimport { Col3 } from \"./dashboard-comps/home/Col3\";\r\nimport { ChatroomsSettings } from \"./dashboard-comps/settings/ChatroomsSettings\";\r\nimport { UserSettings } from \"./dashboard-comps/settings/UserSettings\";\r\nimport { Nav } from \"./dashboard-comps/Nav\";\r\nimport { UserAvatar } from \"./dashboard-comps/UserAvatar\";\r\nimport { SearchChatrooms } from \"./dashboard-comps/SearchChatrooms\";\r\nimport { PageSettings } from \"./dashboard-comps/PageSettings\";\r\n\r\nconst LastMsgContext = React.createContext(\"\");\r\n\r\nexport const PageDashboard = ({\r\n  user,\r\n  activeChatroom,\r\n  setActiveChatroom,\r\n  userChatrooms,\r\n  joinableChatrooms,\r\n  fetchAgain,\r\n  setFetchAgain,\r\n  fetchChatrooms,\r\n}) => {\r\n  const [message, setMessage] = useState([]);\r\n  const [Messages, setmessages] = useState([]);\r\n  const [dashboardNavState, setDashboardNavState] = useState(\"home\");\r\n  const [W, setW] = useState(window.innerWidth);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchChatrooms, setSearchChatrooms] = useState(\"\");\r\n  const [searchJoinableChatroomsCheckbox, setSearchJoinableChatroomsCheckbox] =\r\n    useState(false);\r\n  const [createChatroom, setCreateChatroom] = useState(false);\r\n  const [fetchLastMsg, setFetchLastMsg] = useState(false);\r\n  const [ws, setWs] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // if (!ws) setWs(new WebSocket(\"ws://localhost:5002\"));\r\n    if (!ws) setWs(new WebSocket(\"wss://chatwskul.herokuapp.com\"));\r\n    if (ws) {\r\n      ws.onopen = () => {\r\n        console.log(\"WebSocket Connected\");\r\n      };\r\n\r\n      ws.onclose = () => {\r\n        console.log(\"WebSocket Gone\");\r\n      };\r\n\r\n      ws.onmessage = async (e) => {\r\n        let theMessage = JSON.parse(e.data);\r\n        if (theMessage.type === \"roomsUpdate\") {\r\n          setFetchAgain(!fetchAgain);\r\n          const abortController = new AbortController();\r\n          await fetchChatrooms(abortController.signal, user._id);\r\n          return () => abortController.abort();\r\n        }\r\n      };\r\n    }\r\n    setLoading(false);\r\n    return () => {\r\n      if (ws) ws.close();\r\n    };\r\n  }, [ws]);\r\n\r\n  useEffect(() => {\r\n    let changeW = window.addEventListener(\"resize\", () =>\r\n      setW(window.innerWidth)\r\n    );\r\n    return window.removeEventListener(\"resize\", changeW);\r\n  }, [W]);\r\n\r\n  if (loading) {\r\n    return <h2 className=\"\">Loading...</h2>;\r\n  }\r\n\r\n  return (\r\n    <Container\r\n      className={`page page-dashboard ${\r\n        W < breakpoints.medium\r\n          ? \"page-dashboard-mobile\"\r\n          : \"page-dashboard-desktop\"\r\n      }`}\r\n    >\r\n      {dashboardNavState === \"settings\" ? (\r\n        <PageSettings\r\n          setSearchChatrooms={setSearchChatrooms}\r\n          setDashboardNavState={setDashboardNavState}\r\n          dashboardNavState={dashboardNavState}\r\n          searchChatrooms={searchChatrooms}\r\n          user={user}\r\n          setFetchAgain={setFetchAgain}\r\n          fetchAgain={fetchAgain}\r\n          setActiveChatroom={setActiveChatroom}\r\n          ws={ws}\r\n        />\r\n      ) : (\r\n        <Row className=\"dashboard-con\">\r\n          <Col\r\n            lg={{ span: 2, order: 1 }}\r\n            md={{ span: 2, order: 1 }}\r\n            xs={{ span: 12, order: 1 }}\r\n            className=\"flex dashboard-con-col1\"\r\n          >\r\n            <UserAvatar user={user} />\r\n            <Nav\r\n              setDashboardNavState={setDashboardNavState}\r\n              dashboardNavState={dashboardNavState}\r\n              createChatroom={createChatroom}\r\n              setCreateChatroom={setCreateChatroom}\r\n            />\r\n          </Col>\r\n\r\n          <Col\r\n            lg={{ span: 5, order: 2 }}\r\n            md={{ span: 5, order: 2 }}\r\n            xs={{ span: 12, order: 2 }}\r\n            className=\"dashboard-con-col2\"\r\n          >\r\n            <h4>Chatrooms</h4>\r\n\r\n            <SearchChatrooms\r\n              setSearchChatrooms={setSearchChatrooms}\r\n              setCheckbox={setSearchJoinableChatroomsCheckbox}\r\n              checkbox={searchJoinableChatroomsCheckbox}\r\n              page={dashboardNavState}\r\n            />\r\n\r\n            <ChatroomsHome\r\n              user={user}\r\n              userChatrooms={userChatrooms}\r\n              joinableChatrooms={joinableChatrooms}\r\n              searchChatrooms={searchChatrooms}\r\n              fetchLastMsg={fetchLastMsg}\r\n              setFetchLastMsg={setFetchLastMsg}\r\n              setActiveChatroom={setActiveChatroom}\r\n              searchJoinableChatroomsCheckbox={searchJoinableChatroomsCheckbox}\r\n              setCreateChatroom={setCreateChatroom}\r\n              Messages={Messages}\r\n              setmessages={setmessages}\r\n              ws={ws}\r\n            />\r\n\r\n            <button\r\n              onClick={() => {\r\n                setCreateChatroom(true);\r\n              }}\r\n            >\r\n              create\r\n            </button>\r\n          </Col>\r\n          <If condition={W > breakpoints.medium}>\r\n            <Col\r\n              lg={{ span: 5, order: 3 }}\r\n              md={{ span: 5, order: 3 }}\r\n              xs={{ span: 12, order: 3 }}\r\n              className=\"dashboard-con-col3\"\r\n            >\r\n              <Col3\r\n                user={user}\r\n                activeChatroom={activeChatroom}\r\n                setActiveChatroom={setActiveChatroom}\r\n                ws={ws}\r\n                message={message}\r\n                setMessage={setMessage}\r\n                Messages={Messages}\r\n                setmessages={setmessages}\r\n                createChatroom={createChatroom}\r\n                setCreateChatroom={setCreateChatroom}\r\n                fetchChatrooms={fetchChatrooms}\r\n                fetchLastMsg={fetchLastMsg}\r\n                setFetchLastMsg={setFetchLastMsg}\r\n              />\r\n            </Col>\r\n          </If>\r\n        </Row>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","import { PageDashboard } from \"./main-pages/PageDashboard\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { get } from \"../utils/http\";\r\nexport const Test = () => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [dashboardNavState, setDashboardNavState] = useState(\"home\");\r\n  const [activeChatroom, setActiveChatroom] = useState(null);\r\n  const [allChatrooms, setAllChatrooms] = useState([]);\r\n  const [userChatrooms, setUserChatrooms] = useState([]);\r\n  const [joinableChatrooms, setJoinableChatrooms] = useState([]);\r\n\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n\r\n  const fetchUser = async (signal) => {\r\n    let res = await get(`/protected/get-user`, signal);\r\n    setUser(res.data);\r\n    return fetchChatrooms(signal, res.data._id);\r\n  };\r\n\r\n  const fetchChatrooms = async (signal, userID) => {\r\n    let res = await get(`/protected/get-all-chatrooms`, signal);\r\n    setAllChatrooms(res.data);\r\n    setUserChatrooms(\r\n      res.data\r\n        .filter((chat) => chat.members.includes(userID))\r\n        .sort((chatA, chatB) => {\r\n          return (\r\n            chatB.starmarked.includes(userID) -\r\n            chatA.starmarked.includes(userID)\r\n          );\r\n        })\r\n    );\r\n    setJoinableChatrooms(\r\n      res.data.filter((chat) => !chat.members.includes(userID))\r\n    );\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(async () => {\r\n    const abortController = new AbortController();\r\n    await fetchUser(abortController.signal);\r\n\r\n    return () => abortController.abort();\r\n  }, [fetchAgain, dashboardNavState]);\r\n\r\n  if (loading) {\r\n    return <h2 className=\"\">Loading...</h2>;\r\n  }\r\n  return (\r\n    <PageDashboard\r\n      user={user}\r\n      setUser={setUser}\r\n      activeChatroom={activeChatroom}\r\n      setActiveChatroom={setActiveChatroom}\r\n      allChatrooms={allChatrooms}\r\n      setAllChatrooms={setAllChatrooms}\r\n      userChatrooms={userChatrooms}\r\n      setUserChatrooms={setUserChatrooms}\r\n      joinableChatrooms={joinableChatrooms}\r\n      setJoinableChatrooms={setJoinableChatrooms}\r\n      allChatrooms={allChatrooms}\r\n      setAllChatrooms={setAllChatrooms}\r\n      userChatrooms={userChatrooms}\r\n      setFetchAgain={setFetchAgain}\r\n      fetchAgain={fetchAgain}\r\n      fetchChatrooms={fetchChatrooms}\r\n    />\r\n  );\r\n};\r\n","import { BrowserRouter, Switch } from \"react-router-dom\";\r\nimport { GuardProvider, GuardedRoute } from \"react-router-guards\";\r\n\r\nimport { PageHome } from \"./components/main-pages/PageHome\";\r\nimport { PageDashboard } from \"./components/main-pages/PageDashboard\";\r\nimport { Test } from \"./components/Test\";\r\nimport { get } from \"./utils/http\";\r\n\r\nimport { useEffect } from \"react\";\r\n\r\n// import { ws } from \"./utils/ws\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./style/temp.scss\";\r\n\r\nconst requireLogin = async (to, from, next) => {\r\n  const res = await get(\"/logged-in\");\r\n\r\n  console.log(res);\r\n\r\n  if (to.meta.auth === undefined) return next();\r\n  if (to.meta.auth && !res.data) return next.redirect(\"/\");\r\n  if (!to.meta.auth && res.data) return next.redirect(\"/dashboard\");\r\n\r\n  return next();\r\n};\r\n\r\nconst Loading = () => {\r\n  return <p>Loading...</p>;\r\n};\r\n\r\nconst NotFound = () => {\r\n  return <p>Not Found</p>;\r\n};\r\n\r\nfunction App() {\r\n  console.log(\"hehe\");\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <GuardProvider\r\n          guards={[requireLogin]}\r\n          loading={Loading}\r\n          error={NotFound}\r\n        >\r\n          <Switch>\r\n            <GuardedRoute\r\n              path=\"/\"\r\n              exact\r\n              component={PageHome}\r\n              meta={{ auth: false }}\r\n            />\r\n            <GuardedRoute\r\n              path=\"/dashboard\"\r\n              exact\r\n              component={Test}\r\n              meta={{ auth: true }}\r\n            />\r\n            <GuardedRoute path=\"*\" component={NotFound} />\r\n          </Switch>\r\n        </GuardProvider>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport { client_address } from \"../src/utils/http\";\r\n\r\nReactDOM.render(\r\n  // <Auth0Provider\r\n  //   domain=\"dev-p2j2vhsk.eu.auth0.com\"\r\n  //   clientId=\"2wJquhgDeDOaQKIPbnacTIYdsiJ54ncD\"\r\n  //   redirectUri={window.location.origin}\r\n  // >\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  // </Auth0Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}